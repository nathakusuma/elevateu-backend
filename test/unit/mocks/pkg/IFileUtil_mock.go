// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"
)

// MockIFileUtil is an autogenerated mock type for the IFileUtil type
type MockIFileUtil struct {
	mock.Mock
}

type MockIFileUtil_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIFileUtil) EXPECT() *MockIFileUtil_Expecter {
	return &MockIFileUtil_Expecter{mock: &_m.Mock}
}

// CheckMIMEFileType provides a mock function with given fields: file, allowed
func (_m *MockIFileUtil) CheckMIMEFileType(file multipart.File, allowed []string) (bool, string, error) {
	ret := _m.Called(file, allowed)

	if len(ret) == 0 {
		panic("no return value specified for CheckMIMEFileType")
	}

	var r0 bool
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(multipart.File, []string) (bool, string, error)); ok {
		return rf(file, allowed)
	}
	if rf, ok := ret.Get(0).(func(multipart.File, []string) bool); ok {
		r0 = rf(file, allowed)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(multipart.File, []string) string); ok {
		r1 = rf(file, allowed)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(multipart.File, []string) error); ok {
		r2 = rf(file, allowed)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIFileUtil_CheckMIMEFileType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckMIMEFileType'
type MockIFileUtil_CheckMIMEFileType_Call struct {
	*mock.Call
}

// CheckMIMEFileType is a helper method to define mock.On call
//   - file multipart.File
//   - allowed []string
func (_e *MockIFileUtil_Expecter) CheckMIMEFileType(file interface{}, allowed interface{}) *MockIFileUtil_CheckMIMEFileType_Call {
	return &MockIFileUtil_CheckMIMEFileType_Call{Call: _e.mock.On("CheckMIMEFileType", file, allowed)}
}

func (_c *MockIFileUtil_CheckMIMEFileType_Call) Run(run func(file multipart.File, allowed []string)) *MockIFileUtil_CheckMIMEFileType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(multipart.File), args[1].([]string))
	})
	return _c
}

func (_c *MockIFileUtil_CheckMIMEFileType_Call) Return(_a0 bool, _a1 string, _a2 error) *MockIFileUtil_CheckMIMEFileType_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIFileUtil_CheckMIMEFileType_Call) RunAndReturn(run func(multipart.File, []string) (bool, string, error)) *MockIFileUtil_CheckMIMEFileType_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIFileUtil creates a new instance of MockIFileUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIFileUtil(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIFileUtil {
	mock := &MockIFileUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
