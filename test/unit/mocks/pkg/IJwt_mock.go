// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	enum "github.com/nathakusuma/elevateu-backend/domain/enum"
	jwt "github.com/nathakusuma/elevateu-backend/pkg/jwt"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockIJwt is an autogenerated mock type for the IJwt type
type MockIJwt struct {
	mock.Mock
}

type MockIJwt_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIJwt) EXPECT() *MockIJwt_Expecter {
	return &MockIJwt_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: userID, role
func (_m *MockIJwt) Create(userID uuid.UUID, role enum.UserRole) (string, error) {
	ret := _m.Called(userID, role)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, enum.UserRole) (string, error)); ok {
		return rf(userID, role)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, enum.UserRole) string); ok {
		r0 = rf(userID, role)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, enum.UserRole) error); ok {
		r1 = rf(userID, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIJwt_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIJwt_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - userID uuid.UUID
//   - role enum.UserRole
func (_e *MockIJwt_Expecter) Create(userID interface{}, role interface{}) *MockIJwt_Create_Call {
	return &MockIJwt_Create_Call{Call: _e.mock.On("Create", userID, role)}
}

func (_c *MockIJwt_Create_Call) Run(run func(userID uuid.UUID, role enum.UserRole)) *MockIJwt_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(enum.UserRole))
	})
	return _c
}

func (_c *MockIJwt_Create_Call) Return(_a0 string, _a1 error) *MockIJwt_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIJwt_Create_Call) RunAndReturn(run func(uuid.UUID, enum.UserRole) (string, error)) *MockIJwt_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Decode provides a mock function with given fields: tokenString, claims
func (_m *MockIJwt) Decode(tokenString string, claims *jwt.Claims) error {
	ret := _m.Called(tokenString, claims)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *jwt.Claims) error); ok {
		r0 = rf(tokenString, claims)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIJwt_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type MockIJwt_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - tokenString string
//   - claims *jwt.Claims
func (_e *MockIJwt_Expecter) Decode(tokenString interface{}, claims interface{}) *MockIJwt_Decode_Call {
	return &MockIJwt_Decode_Call{Call: _e.mock.On("Decode", tokenString, claims)}
}

func (_c *MockIJwt_Decode_Call) Run(run func(tokenString string, claims *jwt.Claims)) *MockIJwt_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*jwt.Claims))
	})
	return _c
}

func (_c *MockIJwt_Decode_Call) Return(_a0 error) *MockIJwt_Decode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIJwt_Decode_Call) RunAndReturn(run func(string, *jwt.Claims) error) *MockIJwt_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIJwt creates a new instance of MockIJwt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIJwt(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIJwt {
	mock := &MockIJwt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
