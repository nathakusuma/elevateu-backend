// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/nathakusuma/elevateu-backend/domain/dto"

	entity "github.com/nathakusuma/elevateu-backend/domain/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockIUserService is an autogenerated mock type for the IUserService type
type MockIUserService struct {
	mock.Mock
}

type MockIUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUserService) EXPECT() *MockIUserService_Expecter {
	return &MockIUserService_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, req
func (_m *MockIUserService) CreateUser(ctx context.Context, req *dto.CreateUserRequest) (uuid.UUID, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateUserRequest) (uuid.UUID, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateUserRequest) uuid.UUID); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.CreateUserRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockIUserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - req *dto.CreateUserRequest
func (_e *MockIUserService_Expecter) CreateUser(ctx interface{}, req interface{}) *MockIUserService_CreateUser_Call {
	return &MockIUserService_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, req)}
}

func (_c *MockIUserService_CreateUser_Call) Run(run func(ctx context.Context, req *dto.CreateUserRequest)) *MockIUserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.CreateUserRequest))
	})
	return _c
}

func (_c *MockIUserService_CreateUser_Call) Return(_a0 uuid.UUID, _a1 error) *MockIUserService_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserService_CreateUser_Call) RunAndReturn(run func(context.Context, *dto.CreateUserRequest) (uuid.UUID, error)) *MockIUserService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *MockIUserService) DeleteUser(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUserService_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockIUserService_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockIUserService_Expecter) DeleteUser(ctx interface{}, id interface{}) *MockIUserService_DeleteUser_Call {
	return &MockIUserService_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *MockIUserService_DeleteUser_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockIUserService_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockIUserService_DeleteUser_Call) Return(_a0 error) *MockIUserService_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUserService_DeleteUser_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockIUserService_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockIUserService) GetUserByEmail(ctx context.Context, email string) (*entity.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserService_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockIUserService_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockIUserService_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockIUserService_GetUserByEmail_Call {
	return &MockIUserService_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockIUserService_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockIUserService_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIUserService_GetUserByEmail_Call) Return(_a0 *entity.User, _a1 error) *MockIUserService_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserService_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*entity.User, error)) *MockIUserService_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *MockIUserService) GetUserByID(ctx context.Context, id uuid.UUID) (*entity.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserService_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockIUserService_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockIUserService_Expecter) GetUserByID(ctx interface{}, id interface{}) *MockIUserService_GetUserByID_Call {
	return &MockIUserService_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *MockIUserService_GetUserByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockIUserService_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockIUserService_GetUserByID_Call) Return(_a0 *entity.User, _a1 error) *MockIUserService_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserService_GetUserByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*entity.User, error)) *MockIUserService_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function with given fields: ctx, email, newPassword
func (_m *MockIUserService) UpdatePassword(ctx context.Context, email string, newPassword string) error {
	ret := _m.Called(ctx, email, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUserService_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type MockIUserService_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - newPassword string
func (_e *MockIUserService_Expecter) UpdatePassword(ctx interface{}, email interface{}, newPassword interface{}) *MockIUserService_UpdatePassword_Call {
	return &MockIUserService_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, email, newPassword)}
}

func (_c *MockIUserService_UpdatePassword_Call) Run(run func(ctx context.Context, email string, newPassword string)) *MockIUserService_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIUserService_UpdatePassword_Call) Return(_a0 error) *MockIUserService_UpdatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUserService_UpdatePassword_Call) RunAndReturn(run func(context.Context, string, string) error) *MockIUserService_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, id, req
func (_m *MockIUserService) UpdateUser(ctx context.Context, id uuid.UUID, req dto.UpdateUserRequest) error {
	ret := _m.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.UpdateUserRequest) error); ok {
		r0 = rf(ctx, id, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUserService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockIUserService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - req dto.UpdateUserRequest
func (_e *MockIUserService_Expecter) UpdateUser(ctx interface{}, id interface{}, req interface{}) *MockIUserService_UpdateUser_Call {
	return &MockIUserService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, id, req)}
}

func (_c *MockIUserService_UpdateUser_Call) Run(run func(ctx context.Context, id uuid.UUID, req dto.UpdateUserRequest)) *MockIUserService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(dto.UpdateUserRequest))
	})
	return _c
}

func (_c *MockIUserService_UpdateUser_Call) Return(_a0 error) *MockIUserService_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUserService_UpdateUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, dto.UpdateUserRequest) error) *MockIUserService_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIUserService creates a new instance of MockIUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserService {
	mock := &MockIUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
