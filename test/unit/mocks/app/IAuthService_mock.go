// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/nathakusuma/elevateu-backend/domain/dto"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockIAuthService is an autogenerated mock type for the IAuthService type
type MockIAuthService struct {
	mock.Mock
}

type MockIAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAuthService) EXPECT() *MockIAuthService_Expecter {
	return &MockIAuthService_Expecter{mock: &_m.Mock}
}

// CheckRegisterOTP provides a mock function with given fields: ctx, email, otp
func (_m *MockIAuthService) CheckRegisterOTP(ctx context.Context, email string, otp string) error {
	ret := _m.Called(ctx, email, otp)

	if len(ret) == 0 {
		panic("no return value specified for CheckRegisterOTP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAuthService_CheckRegisterOTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckRegisterOTP'
type MockIAuthService_CheckRegisterOTP_Call struct {
	*mock.Call
}

// CheckRegisterOTP is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - otp string
func (_e *MockIAuthService_Expecter) CheckRegisterOTP(ctx interface{}, email interface{}, otp interface{}) *MockIAuthService_CheckRegisterOTP_Call {
	return &MockIAuthService_CheckRegisterOTP_Call{Call: _e.mock.On("CheckRegisterOTP", ctx, email, otp)}
}

func (_c *MockIAuthService_CheckRegisterOTP_Call) Run(run func(ctx context.Context, email string, otp string)) *MockIAuthService_CheckRegisterOTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIAuthService_CheckRegisterOTP_Call) Return(_a0 error) *MockIAuthService_CheckRegisterOTP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAuthService_CheckRegisterOTP_Call) RunAndReturn(run func(context.Context, string, string) error) *MockIAuthService_CheckRegisterOTP_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, req
func (_m *MockIAuthService) Login(ctx context.Context, req dto.LoginRequest) (dto.LoginResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 dto.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.LoginRequest) (dto.LoginResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.LoginRequest) dto.LoginResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(dto.LoginResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.LoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockIAuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.LoginRequest
func (_e *MockIAuthService_Expecter) Login(ctx interface{}, req interface{}) *MockIAuthService_Login_Call {
	return &MockIAuthService_Login_Call{Call: _e.mock.On("Login", ctx, req)}
}

func (_c *MockIAuthService_Login_Call) Run(run func(ctx context.Context, req dto.LoginRequest)) *MockIAuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.LoginRequest))
	})
	return _c
}

func (_c *MockIAuthService_Login_Call) Return(_a0 dto.LoginResponse, _a1 error) *MockIAuthService_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthService_Login_Call) RunAndReturn(run func(context.Context, dto.LoginRequest) (dto.LoginResponse, error)) *MockIAuthService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx, userID
func (_m *MockIAuthService) Logout(ctx context.Context, userID uuid.UUID) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAuthService_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockIAuthService_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockIAuthService_Expecter) Logout(ctx interface{}, userID interface{}) *MockIAuthService_Logout_Call {
	return &MockIAuthService_Logout_Call{Call: _e.mock.On("Logout", ctx, userID)}
}

func (_c *MockIAuthService_Logout_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockIAuthService_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockIAuthService_Logout_Call) Return(_a0 error) *MockIAuthService_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAuthService_Logout_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockIAuthService_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function with given fields: ctx, refreshToken
func (_m *MockIAuthService) Refresh(ctx context.Context, refreshToken string) (dto.LoginResponse, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 dto.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (dto.LoginResponse, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) dto.LoginResponse); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(dto.LoginResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAuthService_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type MockIAuthService_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *MockIAuthService_Expecter) Refresh(ctx interface{}, refreshToken interface{}) *MockIAuthService_Refresh_Call {
	return &MockIAuthService_Refresh_Call{Call: _e.mock.On("Refresh", ctx, refreshToken)}
}

func (_c *MockIAuthService_Refresh_Call) Run(run func(ctx context.Context, refreshToken string)) *MockIAuthService_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIAuthService_Refresh_Call) Return(_a0 dto.LoginResponse, _a1 error) *MockIAuthService_Refresh_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthService_Refresh_Call) RunAndReturn(run func(context.Context, string) (dto.LoginResponse, error)) *MockIAuthService_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, req
func (_m *MockIAuthService) Register(ctx context.Context, req dto.RegisterRequest) (dto.LoginResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 dto.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.RegisterRequest) (dto.LoginResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.RegisterRequest) dto.LoginResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(dto.LoginResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.RegisterRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAuthService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockIAuthService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.RegisterRequest
func (_e *MockIAuthService_Expecter) Register(ctx interface{}, req interface{}) *MockIAuthService_Register_Call {
	return &MockIAuthService_Register_Call{Call: _e.mock.On("Register", ctx, req)}
}

func (_c *MockIAuthService_Register_Call) Run(run func(ctx context.Context, req dto.RegisterRequest)) *MockIAuthService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.RegisterRequest))
	})
	return _c
}

func (_c *MockIAuthService_Register_Call) Return(_a0 dto.LoginResponse, _a1 error) *MockIAuthService_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthService_Register_Call) RunAndReturn(run func(context.Context, dto.RegisterRequest) (dto.LoginResponse, error)) *MockIAuthService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// RequestPasswordResetOTP provides a mock function with given fields: ctx, email
func (_m *MockIAuthService) RequestPasswordResetOTP(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for RequestPasswordResetOTP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAuthService_RequestPasswordResetOTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestPasswordResetOTP'
type MockIAuthService_RequestPasswordResetOTP_Call struct {
	*mock.Call
}

// RequestPasswordResetOTP is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockIAuthService_Expecter) RequestPasswordResetOTP(ctx interface{}, email interface{}) *MockIAuthService_RequestPasswordResetOTP_Call {
	return &MockIAuthService_RequestPasswordResetOTP_Call{Call: _e.mock.On("RequestPasswordResetOTP", ctx, email)}
}

func (_c *MockIAuthService_RequestPasswordResetOTP_Call) Run(run func(ctx context.Context, email string)) *MockIAuthService_RequestPasswordResetOTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIAuthService_RequestPasswordResetOTP_Call) Return(_a0 error) *MockIAuthService_RequestPasswordResetOTP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAuthService_RequestPasswordResetOTP_Call) RunAndReturn(run func(context.Context, string) error) *MockIAuthService_RequestPasswordResetOTP_Call {
	_c.Call.Return(run)
	return _c
}

// RequestRegisterOTP provides a mock function with given fields: ctx, email
func (_m *MockIAuthService) RequestRegisterOTP(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for RequestRegisterOTP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAuthService_RequestRegisterOTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestRegisterOTP'
type MockIAuthService_RequestRegisterOTP_Call struct {
	*mock.Call
}

// RequestRegisterOTP is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockIAuthService_Expecter) RequestRegisterOTP(ctx interface{}, email interface{}) *MockIAuthService_RequestRegisterOTP_Call {
	return &MockIAuthService_RequestRegisterOTP_Call{Call: _e.mock.On("RequestRegisterOTP", ctx, email)}
}

func (_c *MockIAuthService_RequestRegisterOTP_Call) Run(run func(ctx context.Context, email string)) *MockIAuthService_RequestRegisterOTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIAuthService_RequestRegisterOTP_Call) Return(_a0 error) *MockIAuthService_RequestRegisterOTP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAuthService_RequestRegisterOTP_Call) RunAndReturn(run func(context.Context, string) error) *MockIAuthService_RequestRegisterOTP_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPassword provides a mock function with given fields: ctx, req
func (_m *MockIAuthService) ResetPassword(ctx context.Context, req dto.ResetPasswordRequest) (dto.LoginResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 dto.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.ResetPasswordRequest) (dto.LoginResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.ResetPasswordRequest) dto.LoginResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(dto.LoginResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.ResetPasswordRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAuthService_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type MockIAuthService_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.ResetPasswordRequest
func (_e *MockIAuthService_Expecter) ResetPassword(ctx interface{}, req interface{}) *MockIAuthService_ResetPassword_Call {
	return &MockIAuthService_ResetPassword_Call{Call: _e.mock.On("ResetPassword", ctx, req)}
}

func (_c *MockIAuthService_ResetPassword_Call) Run(run func(ctx context.Context, req dto.ResetPasswordRequest)) *MockIAuthService_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.ResetPasswordRequest))
	})
	return _c
}

func (_c *MockIAuthService_ResetPassword_Call) Return(_a0 dto.LoginResponse, _a1 error) *MockIAuthService_ResetPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthService_ResetPassword_Call) RunAndReturn(run func(context.Context, dto.ResetPasswordRequest) (dto.LoginResponse, error)) *MockIAuthService_ResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAuthService creates a new instance of MockIAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAuthService {
	mock := &MockIAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
