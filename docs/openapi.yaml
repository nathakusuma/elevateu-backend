openapi: 3.1.0
info:
  title: ElevateU
  version: '1.0.0'

servers:
  - url: "https://elevateu.nathakusuma.com/api/v1"
    description: Production server
  - url: "http://localhost/api/v1"
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRole:
      type: string
      enum: [ student, mentor, admin ]

    StudentBadge:
      type: string
      enum: [ bronze, silver, gold, nothing ]

    StudentData:
      type: object
      properties:
        instance:
          type: string
          examples:
            - "Universitas Indonesia"
        major:
          type: string
          examples:
            - "Computer Science"
        point:
          type: integer
          examples:
            - 1000
        badge:
          $ref: '#/components/schemas/StudentBadge'
        subscribed_boost_until:
          type: string
          format: date-time
          examples:
            - "2022-12-31T23:59:59Z"
        subscribed_challenge_until:
          type: string
          format: date-time
          examples:
            - "2022-12-31T23:59:59Z"

    MentorData:
      type: object
      properties:
        address:
          type: string
          examples:
            - "123 Main Street, Jakarta"
        specialization:
          type: string
          examples:
            - "Backend Development"
        current_job:
          type: string
          examples:
            - "Senior Developer"
        company:
          type: string
          examples:
            - "Gojek"
        bio:
          type: [ "string", "null" ]
          examples:
            - "Experienced backend developer with 5+ years in the industry"
        gender:
          type: string
          examples:
            - "male"
            - "female"
        rating:
          type: number
          format: float
          examples:
            - 4.8
        rating_count:
          type: integer
          examples:
            - 25
        price:
          type: integer
          examples:
            - 250000
        balance:
          type: integer
          examples:
            - 1500000

    User:
      type: object
      properties:
        id:
          type: [ "string", "null" ]
          format: uuid
        name:
          type: [ "string", "null" ]
          examples:
            - "Natha Kusuma"
        email:
          type: [ "string", "null" ]
          format: email
        role:
          $ref: '#/components/schemas/UserRole'
        avatar_url:
          type: [ "string", "null" ]
          format: uri
          examples:
            - "https://elevateu.nathakusuma.com/assets/avatar.jpg"
        created_at:
          type: [ "string", "null" ]
          format: date-time
        updated_at:
          type: [ "string", "null" ]
          format: date-time
        student:
          $ref: '#/components/schemas/StudentData'
        mentor:
          $ref: '#/components/schemas/MentorData'

    UserMinimal:
      type: object
      properties:
        id:
          type: [ "string", "null" ]
          format: uuid
        name:
          type: [ "string", "null" ]
          examples:
            - "Natha Kusuma"
        role:
          $ref: '#/components/schemas/UserRole'
        avatar_url:
          type: [ "string", "null" ]
          format: uri
          examples:
            - "https://elevateu.nathakusuma.com/assets/avatar.jpg"
        student:
          $ref: '#/components/schemas/StudentData'
        mentor:
          $ref: '#/components/schemas/MentorData'

    Category:
      type: object
      properties:
        id:
          type: [ "string", "null" ]
          format: uuid
          examples:
            - "01949e48-9f6b-796b-9611-3c9025493233"
        name:
          type: string
          examples:
            - "Programming"

    Course:
      type: object
      properties:
        id:
          type: string
          format: uuid
          examples:
            - "01949e48-9f6b-796b-9611-3c9025493233"
        category:
          type: string
          examples:
            - "Programming"
        title:
          type: string
          examples:
            - "Introduction to Go Programming"
        description:
          type: string
          examples:
            - "Learn the fundamentals of Go programming language."
        teacher_name:
          type: string
          examples:
            - "John Doe"
        teacher_avatar_url:
          type: string
          format: uri
          examples:
            - "https://elevateu.nathakusuma.com/assets/teacher_avatar.jpg"
        thumbnail_url:
          type: string
          format: uri
          examples:
            - "https://elevateu.nathakusuma.com/assets/thumbnail.jpg"
        preview_video_url:
          type: string
          format: uri
          examples:
            - "https://elevateu.nathakusuma.com/assets/preview_video.mp4"
        rating:
          type: number
          format: float
          examples:
            - 4.5
        rating_count:
          type: integer
          examples:
            - 25
        enrollment_count:
          type: integer
          examples:
            - 120
        content_count:
          type: integer
          examples:
            - 15
        total_duration:
          type: integer
          examples:
            - 450
        content_completed:
          type: integer
          examples:
            - 7
        is_completed:
          type: boolean
          examples:
            - false

    CourseContent:
      type: object
      properties:
        type:
          type: string
          enum: [ video, material ]
          examples:
            - "video"
        id:
          type: string
          format: uuid
          examples:
            - "01949e48-9f6b-796b-9611-3c9025493233"
        url:
          type: string
          format: uri
          examples:
            - "https://elevateu.nathakusuma.com/assets/video.mp4"
        thumbnail_url:
          type: string
          format: uri
          examples:
            - "https://elevateu.nathakusuma.com/assets/thumbnail.jpg"
        title:
          type: string
          examples:
            - "Introduction to Variables"
        description:
          type: string
          examples:
            - "Learn about variables in Go programming language"
        subtitle:
          type: string
          examples:
            - "Variables fundamentals"
        duration:
          type: integer
          examples:
            - 30
        is_free:
          type: boolean
          examples:
            - false

    CourseFeedback:
      type: object
      properties:
        id:
          type: string
          format: uuid
          examples:
            - "01949e48-9f6b-796b-9611-3c9025493233"
        rating:
          type: number
          format: float
          examples:
            - 4.5
        feedback:
          type: string
          examples:
            - "Great course, learned a lot!"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        student_name:
          type: string
          examples:
            - "Jane Smith"
        student_avatar_url:
          type: string
          format: uri
          examples:
            - "https://elevateu.nathakusuma.com/assets/student_avatar.jpg"

    ChallengeDifficulty:
      type: string
      enum: [ beginner, intermediate, advanced ]

    ChallengeGroup:
      type: object
      properties:
        id:
          type: string
          format: uuid
          examples:
            - "01949e48-9f6b-796b-9611-3c9025493233"
        title:
          type: string
          examples:
            - "Data Structures and Algorithms"
        description:
          type: string
          examples:
            - "Practice and improve your algorithm skills with these challenges."
        challenge_count:
          type: integer
          examples:
            - 15
        thumbnail_url:
          type: string
          format: uri
          examples:
            - "https://elevateu.nathakusuma.com/assets/challenge_thumbnail.jpg"

    Challenge:
      type: object
      properties:
        id:
          type: string
          format: uuid
          examples:
            - "01949e48-9f6b-796b-9611-3c9025493233"
        title:
          type: string
          examples:
            - "Two Sum Problem"
        subtitle:
          type: string
          examples:
            - "Find indices of two numbers that add up to target"
        description:
          type: string
          examples:
            - "Given an array of integers, return indices of the two numbers such that they add up to a specific target."
        difficulty:
          $ref: '#/components/schemas/ChallengeDifficulty'
        is_free:
          type: boolean
          examples:
            - false
        submission_count:
          type: integer
          examples:
            - 42
        submission_url:
          type: string
          format: uri
          examples:
            - "https://github.com/username/solution"

    ChallengeSubmission:
      type: object
      properties:
        id:
          type: string
          format: uuid
          examples:
            - "01949e48-9f6b-796b-9611-3c9025493233"
        url:
          type: string
          format: uri
          examples:
            - "https://github.com/username/solution"
        student_name:
          type: string
          examples:
            - "John Doe"
        student_avatar_url:
          type: string
          format: uri
          examples:
            - "https://elevateu.nathakusuma.com/assets/student_avatar.jpg"
        created_at:
          type: string
          format: date-time
        feedback:
          $ref: '#/components/schemas/ChallengeSubmissionFeedback'

    ChallengeSubmissionFeedback:
      type: object
      properties:
        score:
          type: integer
          minimum: 0
          maximum: 100
          examples:
            - 85
        feedback:
          type: string
          examples:
            - "Great solution! Good time complexity but could improve space usage."
        mentor_name:
          type: string
          examples:
            - "Jane Smith"
        mentor_avatar_url:
          type: string
          format: uri
          examples:
            - "https://elevateu.nathakusuma.com/assets/mentor_avatar.jpg"
        created_at:
          type: string
          format: date-time

    PaginationResponse:
      type: object
      properties:
        has_more:
          type: boolean

    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          format: uri-reference
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
        trace_id:
          type: string
          format: uuid
        validation_errors:
          type: array
          items:
            type: object
            additionalProperties: true

  responses:
    # Errors
    ## General
    ErrInternalServer:
      description: Internal server error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://elevateu.nathakusuma.com/errors/internal-server-error"
            title: "Something went wrong in our server. Please try again later."
            status: 500
            trace_id: "652e0a03-1c0a-404a-ac47-685d7ecb22d8"
            instance: "https://elevateu.nathakusuma.com/api/v1/auth/login"

    ErrFailParseRequest:
      description: Failed to parse request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://elevateu.nathakusuma.com/errors/fail-parse-request"
            title: "Failed to parse request. Please check your request format."
            status: 400
            instance: "https://elevateu.nathakusuma.com/api/v1/auth/login"

    ErrForbiddenRole:
      description: Role not allowed
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://elevateu.nathakusuma.com/errors/forbidden-role"
            title: "You're not allowed to access this resource."
            status: 403
            instance: "https://elevateu.nathakusuma.com/api/v1/users"

    ErrForbiddenUser:
      description: User not allowed
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://elevateu.nathakusuma.com/errors/forbidden-user"
            title: "You're not allowed to access this resource."
            status: 403
            instance: "https://elevateu.nathakusuma.com/api/v1/users/01949e48-9f6b-796b-9611-3c9025493233"

    NotFound:
      description: Resource not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://elevateu.nathakusuma.com/errors/not-found"
            title: "Resource not found."
            status: 404
            instance: "https://elevateu.nathakusuma.com/api/v1/users/01949e48-9f6b-796b-9611-3c9025493233"

    ErrValidation:
      description: Validation error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://elevateu.nathakusuma.com/errors/validation-error"
            title: "There are invalid fields in your request. Please check and try again"
            status: 422
            instance: "https://elevateu.nathakusuma.com/api/v1/auth/register"
            validation_errors:
              - email:
                  tag: "required"
                  param: ""
                  translation: "Email is a required field"

    ErrFileTooLarge:
      description: File size too large
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://elevateu.nathakusuma.com/errors/file-too-large"
            title: "File size is too large. Please upload smaller file."
            status: 413
            detail: "File size is too large (2.5MB). Please upload a file less than 2MB"
            instance: "https://elevateu.nathakusuma.com/api/v1/users/me"

    ErrInvalidFileFormat:
      description: Invalid file format
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://elevateu.nathakusuma.com/errors/invalid-file-format"
            title: "Invalid file format. Please upload a valid file."
            status: 422
            detail: "File type application/octet-stream is not allowed. Please upload a valid image file"
            instance: "https://elevateu.nathakusuma.com/api/v1/users/me"

    ## Auth
    ErrCredentialsNotMatch:
      description: Invalid credentials
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://elevateu.nathakusuma.com/errors/credentials-not-match"
            title: "Credentials do not match. Please try again."
            status: 401
            instance: "https://elevateu.nathakusuma.com/api/v1/auth/login"

    BearerTokenErrors: # Merge ErrNoBearerToken and ErrInvalidBearerToken
      description: Authentication failed
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            noBearerToken:
              value:
                type: "https://elevateu.nathakusuma.com/errors/no-bearer-token"
                title: "You're not logged in. Please login first."
                status: 401
            invalidBearerToken:
              value:
                type: "https://elevateu.nathakusuma.com/errors/invalid-bearer-token"
                title: "Your auth session is invalid. Please renew your auth session."
                status: 401
                instance: "https://elevateu.nathakusuma.com/api/v1/users/me"

    ErrInvalidOTP:
      description: Invalid OTP
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://elevateu.nathakusuma.com/errors/invalid-otp"
            title: "Invalid OTP. Please try again or request a new OTP."
            status: 401
            instance: "https://elevateu.nathakusuma.com/api/v1/auth/register/otp/check"

    ErrInvalidRefreshToken:
      description: Invalid refresh token
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://elevateu.nathakusuma.com/errors/invalid-refresh-token"
            title: "Auth session is invalid. Please login again."
            status: 401
            instance: "https://elevateu.nathakusuma.com/api/v1/auth/refresh"

    ErrEmailAlreadyRegistered:
      description: Email already registered
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://elevateu.nathakusuma.com/errors/email-already-registered"
            title: "Email already registered. Please login or use another email."
            status: 409
            instance: "https://elevateu.nathakusuma.com/api/v1/auth/register"

    ErrCategoryNameExists:
      description: Category name already exists
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://elevateu.nathakusuma.com/errors/category-name-exists"
            title: "Category name already exists. Please use another name."
            status: 409
            instance: "https://elevateu.nathakusuma.com/api/v1/categories"

    ## Courses
    ErrCannotFeedbackUnenrolledCourse:
      description: Cannot feedback unenrolled course
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://elevateu.nathakusuma.com/errors/cannot-feedback-unenrolled-course"
            title: "You cannot give feedback to unenrolled course."
            status: 422
            instance: "https://elevateu.nathakusuma.com/api/v1/courses/01949e48-9f6b-796b-9611-3c9025493233/feedbacks"

    ErrCannotFeedbackUncompletedCourse:
      description: Cannot feedback uncompleted course
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://elevateu.nathakusuma.com/errors/cannot-feedback-uncompleted-course"
            title: "You cannot give feedback to uncompleted course."
            status: 422
            instance: "https://elevateu.nathakusuma.com/api/v1/courses/01949e48-9f6b-796b-9611-3c9025493233/feedbacks"

    ErrStudentAlreadySubmittedFeedback:
      description: Student already submitted feedback
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://elevateu.nathakusuma.com/errors/student-already-submitted-feedback"
            title: "You have already submitted feedback for this course."
            status: 409
            instance: "https://elevateu.nathakusuma.com/api/v1/courses/01949e48-9f6b-796b-9611-3c9025493233/feedbacks"

    ErrStudentAlreadyEnrolled:
      description: Student already enrolled
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://elevateu.nathakusuma.com/errors/student-already-enrolled"
            title: "You have already enrolled in this course."
            status: 409
            instance: "https://elevateu.nathakusuma.com/api/v1/courses/01949e48-9f6b-796b-9611-3c9025493233/enrollments"

    ## Challenges
    ErrStudentAlreadySubmittedChallenge:
      description: Student already submitted challenge
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://elevateu.nathakusuma.com/errors/student-already-submitted-challenge"
            title: "You have already submitted for this challenge."
            status: 409
            instance: "https://elevateu.nathakusuma.com/api/v1/challenges/01949e48-9f6b-796b-9611-3c9025493233/submissions"

    ErrMentorAlreadySubmittedFeedback:
      description: Mentor already submitted feedback
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://elevateu.nathakusuma.com/errors/mentor-already-submitted-feedback"
            title: "A mentor has already submitted feedback for this submission."
            status: 409
            instance: "https://elevateu.nathakusuma.com/api/v1/challenges/submissions/01949e48-9f6b-796b-9611-3c9025493233/feedbacks"

    ErrNotSubscribed:
      description: Not subscribed
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: "https://elevateu.nathakusuma.com/errors/not-subscribed"
            title: "You're not subscribed to this feature. Please subscribe first."
            status: 403
            instance: "https://elevateu.nathakusuma.com/api/v1/challenges/01949e48-9f6b-796b-9611-3c9025493233"

    LoginResponse:
      description: Login response
      content:
        application/json:
          schema:
            type: object
            required:
              - access_token
              - refresh_token
              - user
            properties:
              access_token:
                type: string
                examples:
                  - "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
              refresh_token:
                type: string
                examples:
                  - "zvXQxgxN2pQD4kci41lhnkwfXKAXtt2l"
              user:
                $ref: '#/components/schemas/User'

tags:
  - name: Auth
    description: Authentication and authorization operations
  - name: Users
    description: User management operations
  - name: Categories
    description: Course & Challenge Category
  - name: Courses
    description: Course management operations
  - name: Course Contents
    description: Course content management operations
  - name: Course Feedbacks
    description: Course feedback operations
  - name: Course Progress
    description: Course progress tracking operations
  - name: Challenge Groups
    description: Challenge group management operations
  - name: Challenges
    description: Challenge management operations
  - name: Challenge Submissions
    description: Challenge submission operations

paths:
  /auth/register/otp:
    post:
      tags:
        - Auth
      summary: Request Register OTP
      operationId: requestRegisterOTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 320
      responses:
        '204':
          description: Success - OTP sent successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '409':
          $ref: '#/components/responses/ErrEmailAlreadyRegistered'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /auth/register:
    post:
      tags:
        - Auth
      summary: Register
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
                - name
                - password
                - role
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 320
                otp:
                  type: string
                  examples:
                    - "123456"
                name:
                  type: string
                  minLength: 3
                  maxLength: 60
                  pattern: "^[\x00-\x7F]*$"  # ASCII characters only
                  examples:
                    - "Natha Kusuma"
                password:
                  type: string
                  minLength: 8
                  maxLength: 72
                  pattern: "^[\x00-\x7F]*$"  # ASCII characters only
                role:
                  type: string
                  enum: [ student, mentor ]
                  examples:
                    - "student"
                student:
                  type: object
                  required:
                    - instance
                    - major
                  properties:
                    instance:
                      type: string
                      minLength: 1
                      maxLength: 50
                      examples:
                        - "Universitas Indonesia"
                    major:
                      type: string
                      minLength: 1
                      maxLength: 50
                      examples:
                        - "Computer Science"
                mentor:
                  type: object
                  required:
                    - address
                    - specialization
                    - current_job
                    - company
                    - gender
                  properties:
                    address:
                      type: string
                      minLength: 1
                      maxLength: 255
                      examples:
                        - "123 Main Street, Jakarta"
                    specialization:
                      type: string
                      minLength: 1
                      maxLength: 255
                      examples:
                        - "Backend Development"
                    current_job:
                      type: string
                      minLength: 1
                      maxLength: 50
                      examples:
                        - "Senior Developer"
                    company:
                      type: string
                      minLength: 1
                      maxLength: 50
                      examples:
                        - "Gojek"
                    gender:
                      type: string
                      enum: [ male, female ]
                      examples:
                        - "male"
      responses:
        '201':
          $ref: '#/components/responses/LoginResponse'
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/ErrInvalidOTP'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  pattern: "^[\x00-\x7F]*$"  # ASCII characters only
      responses:
        '200':
          $ref: '#/components/responses/LoginResponse'
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/ErrCredentialsNotMatch'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Refresh Access Token
      operationId: refreshAccessToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  examples:
                    - "zvXQxgxN2pQD4kci41lhnkwfXKAXtt2l"
      responses:
        '200':
          $ref: '#/components/responses/LoginResponse'
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/ErrInvalidRefreshToken'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout
      operationId: logout
      security:
        - bearerAuth: [ ]
      responses:
        '204':
          description: Success - User logged out successfully
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /auth/reset-password/otp:
    post:
      tags:
        - Auth
      summary: Request Password Reset OTP
      operationId: requestPasswordResetOTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '204':
          description: Success - OTP sent successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset Password
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
                - new_password
              properties:
                email:
                  type: string
                  format: email
                otp:
                  type: string
                  examples:
                    - "123456"
                new_password:
                  type: string
                  minLength: 8
                  maxLength: 72
                  pattern: "^[\x00-\x7F]*$"  # ASCII characters only
      responses:
        '200':
          $ref: '#/components/responses/LoginResponse'
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/ErrInvalidOTP'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /users/me:
    get:
      tags:
        - Users
      summary: Get Current User Profile
      operationId: getUserMe
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - user
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '500':
          $ref: '#/components/responses/ErrInternalServer'
    patch:
      tags:
        - Users
      summary: Update User Profile
      description: Update the current user's profile
      operationId: updateUserMe
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 60
                  pattern: "^[\x00-\x7F]*$"  # ASCII characters only
                  examples:
                    - "Natha Kusuma :)"
                student:
                  type: object
                  properties:
                    instance:
                      type: string
                      minLength: 1
                      maxLength: 50
                      examples:
                        - "Universitas Brawijaya"
                    major:
                      type: string
                      minLength: 1
                      maxLength: 50
                      examples:
                        - "Computer Science"
                mentor:
                  type: object
                  properties:
                    address:
                      type: string
                      minLength: 1
                      maxLength: 255
                      examples:
                        - "123 Main Street, Jakarta"
                    specialization:
                      type: string
                      minLength: 1
                      maxLength: 255
                      examples:
                        - "Backend Development"
                    current_job:
                      type: string
                      minLength: 1
                      maxLength: 255
                      examples:
                        - "Senior Developer"
                    company:
                      type: string
                      minLength: 1
                      maxLength: 255
                      examples:
                        - "Gojek"
                    bio:
                      type: string
                      minLength: 1
                      maxLength: 255
                      examples:
                        - "Experienced backend developer with 5+ years in the industry"
                    gender:
                      type: string
                      enum: [ male, female ]
                      examples:
                        - "male"
      responses:
        '204':
          description: Success - User profile updated successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'
    delete:
      tags:
        - Users
      summary: Delete User
      description: Deletes current user.
      operationId: deleteUser
      security:
        - bearerAuth: [ ]
      responses:
        '204':
          description: Success - User deleted successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /users/me/avatar:
    put:
      tags:
        - Users
      summary: Update User Avatar
      description: Update the current user's avatar
      operationId: updateUserAvatar
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: User avatar image (max 2MB, image formats only)
      responses:
        '204':
          description: Success - Avatar updated successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '413':
          $ref: '#/components/responses/ErrFileTooLarge'
        '422':
          $ref: '#/components/responses/ErrInvalidFileFormat'
        '500':
          $ref: '#/components/responses/ErrInternalServer'
    delete:
      tags:
        - Users
      summary: Delete User Avatar
      description: Delete the current user's avatar and revert to default
      operationId: deleteUserAvatar
      security:
        - bearerAuth: [ ]
      responses:
        '204':
          description: Success - Avatar deleted successfully
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /users/leaderboard:
    get:
      tags:
        - Users
      summary: Get Leaderboard
      operationId: getLeaderboard
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - users
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserMinimal'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /users/mentors:
    get:
      tags:
        - Users
      summary: Get All Mentors
      operationId: getAllMentors
      security:
        - bearerAuth: [ ]
      parameters:
        - name: cursor
          in: query
          schema:
            type: string
            format: uuid
          description: Cursor for pagination (UUID of last item in previous page)
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 10
            default: 10
          description: Number of items per page
        - name: direction
          in: query
          schema:
            type: string
            enum: [ next, prev ]
          description: Direction for pagination (required when cursor is provided)
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - users
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserMinimal'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get User by ID
      operationId: getUserById
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - user
                properties:
                  user:
                    $ref: '#/components/schemas/UserMinimal'
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /categories:
    post:
      tags:
        - Categories
      summary: Create New Category
      description: Create a new category. Only available to users with admin role.
      operationId: createCategory
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 50
                  examples:
                    - "Programming"
      responses:
        '201':
          description: Success - Category created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - category
                properties:
                  category:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        examples:
                          - "01949e48-9f6b-796b-9611-3c9025493233"
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '409':
          $ref: '#/components/responses/ErrCategoryNameExists'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'
    get:
      tags:
        - Categories
      summary: Get All Categories
      operationId: getAllCategories
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - categories
                properties:
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /categories/{id}:
    put:
      tags:
        - Categories
      summary: Update Category
      description: Update a category by ID. Only available to users with admin role.
      operationId: updateCategory
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 50
                  examples:
                    - "Web Development"
      responses:
        '204':
          description: Success - Category updated successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/ErrCategoryNameExists'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'
    delete:
      tags:
        - Categories
      summary: Delete Category
      description: Delete a category by ID. Only available to users with admin role.
      operationId: deleteCategory
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      responses:
        '204':
          description: Success - Category deleted successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /courses:
    post:
      tags:
        - Courses
      summary: Create New Course
      description: Create a new course. Only available to users with admin role.
      operationId: createCourse
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - category_id
                - title
                - description
                - teacher_name
                - teacher_avatar
                - thumbnail
              properties:
                category_id:
                  type: string
                  format: uuid
                  examples:
                    - "01949e48-9f6b-796b-9611-3c9025493233"
                title:
                  type: string
                  minLength: 3
                  maxLength: 50
                  examples:
                    - "Introduction to Go Programming"
                description:
                  type: string
                  minLength: 3
                  maxLength: 1000
                  examples:
                    - "Learn the fundamentals of Go programming language."
                teacher_name:
                  type: string
                  minLength: 3
                  maxLength: 50
                  examples:
                    - "John Doe"
                teacher_avatar:
                  type: string
                  format: binary
                  description: Teacher avatar image (max 2MB, image formats only)
                thumbnail:
                  type: string
                  format: binary
                  description: Course thumbnail image (max 2MB, image formats only)
      responses:
        '201':
          description: Success - Course created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - course
                  - preview_video_upload_url
                properties:
                  course:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        examples:
                          - "01949e48-9f6b-796b-9611-3c9025493233"
                  preview_video_upload_url:
                    type: string
                    format: uri
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '413':
          $ref: '#/components/responses/ErrFileTooLarge'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'
    get:
      tags:
        - Courses
      summary: Get Courses
      description: Get a list of courses with pagination and optional filtering.
      operationId: getCourses
      security:
        - bearerAuth: [ ]
      parameters:
        - name: category_id
          in: query
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
          description: Filter courses by category ID
        - name: title
          in: query
          schema:
            type: string
          description: Filter courses by title (partial match)
        - name: cursor
          in: query
          schema:
            type: string
            format: uuid
          description: Cursor for pagination (UUID of last item in previous page)
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 10
            default: 10
          description: Number of items per page
        - name: direction
          in: query
          schema:
            type: string
            enum: [ next, prev ]
          description: Direction for pagination (required when cursor is provided)
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - courses
                  - pagination
                properties:
                  courses:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'
                  pagination:
                    $ref: '#/components/schemas/PaginationResponse'
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /courses/my-enrollments:
    get:
      tags:
        - Courses
      summary: Get Enrolled Courses
      description: Get a list of courses that the current user is enrolled in.
      operationId: getEnrolledCourses
      security:
        - bearerAuth: [ ]
      parameters:
        - name: cursor
          in: query
          schema:
            type: string
            format: uuid
          description: Cursor for pagination (UUID of last item in previous page)
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 10
            default: 10
          description: Number of items per page
        - name: direction
          in: query
          schema:
            type: string
            enum: [ next, prev ]
          description: Direction for pagination (required when cursor is provided)
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - courses
                  - pagination
                properties:
                  courses:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'
                  pagination:
                    $ref: '#/components/schemas/PaginationResponse'
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /courses/{id}:
    get:
      tags:
        - Courses
      summary: Get Course by ID
      operationId: getCourseById
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - course
                properties:
                  course:
                    $ref: '#/components/schemas/Course'
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ErrInternalServer'
    patch:
      tags:
        - Courses
      summary: Update Course
      description: Update a course by ID. Only available to users with admin role.
      operationId: updateCourse
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                category_id:
                  type: string
                  format: uuid
                  examples:
                    - "01949e48-9f6b-796b-9611-3c9025493233"
                title:
                  type: string
                  minLength: 3
                  maxLength: 50
                  examples:
                    - "Advanced Go Programming"
                description:
                  type: string
                  minLength: 3
                  maxLength: 1000
                  examples:
                    - "Dive deeper into advanced Go programming concepts."
                teacher_name:
                  type: string
                  minLength: 3
                  maxLength: 60
                  examples:
                    - "Jane Smith"
                teacher_avatar:
                  type: string
                  format: binary
                  description: Teacher avatar image (max 2MB, image formats only)
                thumbnail:
                  type: string
                  format: binary
                  description: Course thumbnail image (max 2MB, image formats only)
      responses:
        '204':
          description: Success - Course updated successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '413':
          $ref: '#/components/responses/ErrFileTooLarge'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'
    delete:
      tags:
        - Courses
      summary: Delete Course
      description: Delete a course by ID. Only available to users with admin role.
      operationId: deleteCourse
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      responses:
        '204':
          description: Success - Course deleted successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /courses/{id}/preview-video-upload-url:
    get:
      tags:
        - Courses
      summary: Get Preview Video Upload URL
      description: Get a signed URL for uploading a preview video for a course. Only available to users with admin role.
      operationId: getPreviewVideoUploadURL
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - preview_video_upload_url
                properties:
                  preview_video_upload_url:
                    type: string
                    format: uri
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /courses/{id}/enrollments:
    post:
      tags:
        - Courses
      summary: Enroll in Course
      description: Enroll the current user in a course. Only available to users with student role and active Skill Boost subscription.
      operationId: createEnrollment
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      responses:
        '201':
          description: Success - Enrollment created successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/ErrStudentAlreadyEnrolled'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /courses/{courseId}/contents:
    get:
      tags:
        - Course Contents
      summary: Get Course Contents
      description: Get all contents of a course.
      operationId: getCourseContents
      security:
        - bearerAuth: [ ]
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - course_contents
                properties:
                  course_contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/CourseContent'
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /courses/{courseId}/contents/videos:
    post:
      tags:
        - Course Contents
      summary: Create Course Video
      description: Create a new video content for a course. Only available to users with admin role.
      operationId: createVideo
      security:
        - bearerAuth: [ ]
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - duration
                - order
              properties:
                title:
                  type: string
                  minLength: 3
                  maxLength: 50
                  examples:
                    - "Introduction to Variables"
                description:
                  type: string
                  minLength: 3
                  maxLength: 1000
                  examples:
                    - "Learn about variables in Go programming language"
                duration:
                  type: integer
                  minimum: 1
                  examples:
                    - 30
                is_free:
                  type: boolean
                  default: false
                  examples:
                    - true
                order:
                  type: integer
                  examples:
                    - 1
      responses:
        '201':
          description: Success - Video created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - course_content
                  - video_upload_url
                  - thumbnail_upload_url
                properties:
                  course_content:
                    type: object
                    properties:
                      type:
                        type: string
                        examples:
                          - video
                      id:
                        type: string
                        format: uuid
                  video_upload_url:
                    type: string
                    format: uri
                  thumbnail_upload_url:
                    type: string
                    format: uri
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /courses/{courseId}/contents/materials:
    post:
      tags:
        - Course Contents
      summary: Create Course Material
      description: Create a new material content for a course. Only available to users with admin role.
      operationId: createMaterial
      security:
        - bearerAuth: [ ]
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - subtitle
                - order
              properties:
                title:
                  type: string
                  minLength: 3
                  maxLength: 50
                  examples:
                    - "Notes"
                subtitle:
                  type: string
                  minLength: 3
                  maxLength: 50
                  examples:
                    - "Quick reference for Go variables"
                is_free:
                  type: boolean
                  default: false
                  examples:
                    - true
                order:
                  type: integer
                  examples:
                    - 2
      responses:
        '201':
          description: Success - Material created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - course_content
                  - material_upload_url
                properties:
                  course_content:
                    type: object
                    properties:
                      type:
                        type: string
                        examples:
                          - material
                      id:
                        type: string
                        format: uuid
                  material_upload_url:
                    type: string
                    format: uri
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /courses/contents/videos/{id}:
    patch:
      tags:
        - Course Contents
      summary: Update Course Video
      description: Update a video content by ID. Only available to users with admin role.
      operationId: updateVideo
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 3
                  maxLength: 50
                  examples:
                    - "Advanced Variables in Go"
                description:
                  type: string
                  minLength: 3
                  maxLength: 1000
                  examples:
                    - "Dive deeper into variables in Go programming language"
                duration:
                  type: integer
                  minimum: 1
                  examples:
                    - 45
                is_free:
                  type: boolean
                  examples:
                    - false
                order:
                  type: integer
                  examples:
                    - 3
      responses:
        '204':
          description: Success - Video updated successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'
    delete:
      tags:
        - Course Contents
      summary: Delete Course Video
      description: Delete a video content by ID. Only available to users with admin role.
      operationId: deleteVideo
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      responses:
        '204':
          description: Success - Video deleted successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /courses/contents/videos/{id}/upload-url:
    get:
      tags:
        - Course Contents
      summary: Get Video Upload URLs
      description: Get signed URLs for uploading a video and thumbnail. Only available to users with admin role.
      operationId: getVideoUploadURLs
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - video_upload_url
                  - thumbnail_upload_url
                properties:
                  video_upload_url:
                    type: string
                    format: uri
                  thumbnail_upload_url:
                    type: string
                    format: uri
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /courses/contents/materials/{id}:
    patch:
      tags:
        - Course Contents
      summary: Update Course Material
      description: Update a material content by ID. Only available to users with admin role.
      operationId: updateMaterial
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 3
                  maxLength: 50
                  examples:
                    - "Notes"
                subtitle:
                  type: string
                  minLength: 3
                  maxLength: 50
                  examples:
                    - "Comprehensive reference for Go variables"
                is_free:
                  type: boolean
                  examples:
                    - false
                order:
                  type: integer
                  examples:
                    - 4
      responses:
        '204':
          description: Success - Material updated successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'
    delete:
      tags:
        - Course Contents
      summary: Delete Course Material
      description: Delete a material content by ID. Only available to users with admin role.
      operationId: deleteMaterial
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      responses:
        '204':
          description: Success - Material deleted successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /courses/contents/materials/{id}/upload-url:
    get:
      tags:
        - Course Contents
      summary: Get Material Upload URL
      description: Get a signed URL for uploading a material file. Only available to users with admin role.
      operationId: getMaterialUploadURL
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - material_upload_url
                properties:
                  material_upload_url:
                    type: string
                    format: uri
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /courses/contents/videos/{videoId}/progresses:
    post:
      tags:
        - Course Progress
      summary: Update Video Progress
      description: Update progress for a video. Only available to users with student role.
      operationId: updateVideoProgress
      security:
        - bearerAuth: [ ]
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - last_position
              properties:
                last_position:
                  type: integer
                  minimum: 0
                  examples:
                    - 120
                is_completed:
                  type: boolean
                  examples:
                    - true
      responses:
        '204':
          description: Success - Video progress updated successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /courses/contents/materials/{materialId}/progresses:
    post:
      tags:
        - Course Progress
      summary: Complete Material
      description: Mark a material as completed. Only available to users with student role.
      operationId: completeMaterial
      security:
        - bearerAuth: [ ]
      parameters:
        - name: materialId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      responses:
        '204':
          description: Success - Material completed successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /courses/{courseId}/feedbacks:
    post:
      tags:
        - Course Feedbacks
      summary: Create Feedback
      description: Submit feedback for a completed course. Only available to users with student role who have completed the course.
      operationId: createFeedback
      security:
        - bearerAuth: [ ]
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - rating
                - comment
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  examples:
                    - 5
                comment:
                  type: string
                  minLength: 3
                  maxLength: 500
                  examples:
                    - "Great course, very informative and well structured."
      responses:
        '201':
          description: Success - Feedback submitted successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '409':
          $ref: '#/components/responses/ErrStudentAlreadySubmittedFeedback'
        '422':
          description: Validation error or course-specific requirements not met
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              examples:
                validation:
                  value:
                    type: "https://elevateu.nathakusuma.com/errors/validation-error"
                    title: "There are invalid fields in your request. Please check and try again"
                    status: 422
                    detail: "Rating must be between 1 and 5"
                    instance: "https://elevateu.nathakusuma.com/api/v1/courses/01949e48-9f6b-796b-9611-3c9025493233/feedbacks"
                    validation_errors:
                      - rating:
                          tag: "max"
                          param: "5"
                          translation: "Rating must be at most 5"
                unenrolled:
                  value:
                    type: "https://elevateu.nathakusuma.com/errors/validation-error"
                    title: "There are invalid fields in your request. Please check and try again"
                    status: 422
                    detail: "You cannot give feedback to unenrolled course"
                    instance: "https://elevateu.nathakusuma.com/api/v1/courses/01949e48-9f6b-796b-9611-3c9025493233/feedbacks"
                uncompleted:
                  value:
                    type: "https://elevateu.nathakusuma.com/errors/validation-error"
                    title: "There are invalid fields in your request. Please check and try again"
                    status: 422
                    detail: "You cannot give feedback to uncompleted course"
                    instance: "https://elevateu.nathakusuma.com/api/v1/courses/01949e48-9f6b-796b-9611-3c9025493233/feedbacks"
        '500':
          $ref: '#/components/responses/ErrInternalServer'
    get:
      tags:
        - Course Feedbacks
      summary: Get Course Feedbacks
      description: Get all feedbacks for a course.
      operationId: getFeedbacks
      security:
        - bearerAuth: [ ]
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
        - name: cursor
          in: query
          schema:
            type: string
            format: uuid
          description: Cursor for pagination (UUID of last item in previous page)
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 10
            default: 10
          description: Number of items per page
        - name: direction
          in: query
          schema:
            type: string
            enum: [ next, prev ]
          description: Direction for pagination (required when cursor is provided)
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - feedbacks
                  - pagination
                properties:
                  feedbacks:
                    type: array
                    items:
                      $ref: '#/components/schemas/CourseFeedback'
                  pagination:
                    $ref: '#/components/schemas/PaginationResponse'
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /courses/feedbacks/{id}:
    patch:
      tags:
        - Course Feedbacks
      summary: Update Feedback
      description: Update a feedback by ID. Users can only update their own feedback.
      operationId: updateFeedback
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  examples:
                    - 4
                comment:
                  type: string
                  minLength: 3
                  maxLength: 500
                  examples:
                    - "Updated review: Good course with some areas for improvement."
      responses:
        '204':
          description: Success - Feedback updated successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenUser'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'
    delete:
      tags:
        - Course Feedbacks
      summary: Delete Feedback
      description: Delete a feedback by ID. Users can only delete their own feedback.
      operationId: deleteFeedback
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      responses:
        '204':
          description: Success - Feedback deleted successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenUser'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /challenge-groups:
    post:
      tags:
        - Challenge Groups
      summary: Create New Challenge Group
      description: Create a new challenge group. Only available to users with admin role.
      operationId: createChallengeGroup
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - category_id
                - title
                - description
                - thumbnail
              properties:
                category_id:
                  type: string
                  format: uuid
                  examples:
                    - "01949e48-9f6b-796b-9611-3c9025493233"
                title:
                  type: string
                  minLength: 3
                  maxLength: 50
                  examples:
                    - "Data Structures and Algorithms"
                description:
                  type: string
                  minLength: 3
                  maxLength: 1000
                  examples:
                    - "Practice and improve your algorithm skills with these challenges."
                thumbnail:
                  type: string
                  format: binary
                  description: Group thumbnail image (max 2MB, image formats only)
      responses:
        '201':
          description: Success - Challenge group created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - challenge_group
                properties:
                  challenge_group:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '413':
          $ref: '#/components/responses/ErrFileTooLarge'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'
    get:
      tags:
        - Challenge Groups
      summary: Get Challenge Groups
      description: Get a list of challenge groups with pagination and optional filtering.
      operationId: getChallengeGroups
      security:
        - bearerAuth: [ ]
      parameters:
        - name: category_id
          in: query
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
          description: Filter by category ID
        - name: title
          in: query
          schema:
            type: string
          description: Filter by title (partial match)
        - name: cursor
          in: query
          schema:
            type: string
            format: uuid
          description: Cursor for pagination (UUID of last item in previous page)
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 10
            default: 10
          description: Number of items per page
        - name: direction
          in: query
          schema:
            type: string
            enum: [ next, prev ]
          description: Direction for pagination (required when cursor is provided)
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - challenge_groups
                  - pagination
                properties:
                  challenge_groups:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChallengeGroup'
                  pagination:
                    $ref: '#/components/schemas/PaginationResponse'
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /challenge-groups/{id}:
    patch:
      tags:
        - Challenge Groups
      summary: Update Challenge Group
      description: Update a challenge group. Only available to users with admin role.
      operationId: updateChallengeGroup
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                category_id:
                  type: string
                  format: uuid
                  examples:
                    - "01949e48-9f6b-796b-9611-3c9025493233"
                title:
                  type: string
                  minLength: 3
                  maxLength: 50
                  examples:
                    - "Advanced Algorithms"
                description:
                  type: string
                  minLength: 3
                  maxLength: 1000
                  examples:
                    - "Updated description for algorithm challenges."
                thumbnail:
                  type: string
                  format: binary
                  description: Group thumbnail image (max 2MB, image formats only)
      responses:
        '204':
          description: Success - Challenge group updated successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '413':
          $ref: '#/components/responses/ErrFileTooLarge'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'
    delete:
      tags:
        - Challenge Groups
      summary: Delete Challenge Group
      description: Delete a challenge group. Only available to users with admin role.
      operationId: deleteChallengeGroup
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      responses:
        '204':
          description: Success - Challenge group deleted successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /challenges:
    post:
      tags:
        - Challenges
      summary: Create New Challenge
      description: Create a new challenge. Only available to users with admin role.
      operationId: createChallenge
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - group_id
                - title
                - subtitle
                - description
                - difficulty
              properties:
                group_id:
                  type: string
                  format: uuid
                  examples:
                    - "01949e48-9f6b-796b-9611-3c9025493233"
                title:
                  type: string
                  minLength: 3
                  maxLength: 50
                  examples:
                    - "Two Sum Problem"
                subtitle:
                  type: string
                  minLength: 3
                  maxLength: 100
                  examples:
                    - "Find indices of two numbers that add up to target"
                description:
                  type: string
                  minLength: 3
                  maxLength: 5000
                  examples:
                    - "Given an array of integers, return indices of the two numbers such that they add up to a specific target."
                difficulty:
                  $ref: '#/components/schemas/ChallengeDifficulty'
                is_free:
                  type: boolean
                  default: false
                  examples:
                    - false
      responses:
        '201':
          description: Success - Challenge created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - challenge
                properties:
                  challenge:
                    $ref: '#/components/schemas/Challenge'
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'
    get:
      tags:
        - Challenges
      summary: Get Challenges
      description: Get a list of challenges with filtering by group and difficulty.
      operationId: getChallenges
      security:
        - bearerAuth: [ ]
      parameters:
        - name: group_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
        - name: difficulty
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/ChallengeDifficulty'
        - name: cursor
          in: query
          schema:
            type: string
            format: uuid
          description: Cursor for pagination (UUID of last item in previous page)
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 10
            default: 10
          description: Number of items per page
        - name: direction
          in: query
          schema:
            type: string
            enum: [ next, prev ]
          description: Direction for pagination (required when cursor is provided)
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - challenges
                  - pagination
                properties:
                  challenges:
                    type: array
                    items:
                      $ref: '#/components/schemas/Challenge'
                  pagination:
                    $ref: '#/components/schemas/PaginationResponse'
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /challenges/{id}:
    get:
      tags:
        - Challenges
      summary: Get Challenge by ID
      description: Get detailed information about a challenge. Requires challenge subscription.
      operationId: getChallengeById
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - challenge
                properties:
                  challenge:
                    $ref: '#/components/schemas/Challenge'
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrNotSubscribed'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ErrInternalServer'
    patch:
      tags:
        - Challenges
      summary: Update Challenge
      description: Update a challenge. Only available to users with admin role.
      operationId: updateChallenge
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                group_id:
                  type: string
                  format: uuid
                  examples:
                    - "01949e48-9f6b-796b-9611-3c9025493233"
                title:
                  type: string
                  minLength: 3
                  maxLength: 50
                  examples:
                    - "Updated Two Sum Problem"
                subtitle:
                  type: string
                  minLength: 3
                  maxLength: 100
                  examples:
                    - "Updated subtitle"
                description:
                  type: string
                  minLength: 3
                  maxLength: 5000
                  examples:
                    - "Updated description for the challenge."
                difficulty:
                  $ref: '#/components/schemas/ChallengeDifficulty'
                is_free:
                  type: boolean
                  examples:
                    - true
      responses:
        '204':
          description: Success - Challenge updated successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'
    delete:
      tags:
        - Challenges
      summary: Delete Challenge
      description: Delete a challenge. Only available to users with admin role.
      operationId: deleteChallenge
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      responses:
        '204':
          description: Success - Challenge deleted successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /challenges/{challenge_id}/submissions:
    post:
      tags:
        - Challenge Submissions
      summary: Submit Solution for Challenge
      description: Submit a solution for a challenge. Only available to users with student role and active Challenge subscription.
      operationId: createChallengeSubmission
      security:
        - bearerAuth: [ ]
      parameters:
        - name: challenge_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - url
              properties:
                url:
                  type: string
                  format: uri
                  examples:
                    - "https://github.com/username/solution"
      responses:
        '201':
          description: Success - Challenge submission created successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/ErrStudentAlreadySubmittedChallenge'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'
    get:
      tags:
        - Challenge Submissions
      summary: Get Student's Own Submission
      description: Get the current student's submission for a challenge. Only available to users with student role and active Challenge subscription.
      operationId: getStudentChallengeSubmission
      security:
        - bearerAuth: [ ]
      parameters:
        - name: challenge_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - submission
                properties:
                  submission:
                    $ref: '#/components/schemas/ChallengeSubmission'
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrNotSubscribed'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /challenges/{challenge_id}/submissions/all:
    get:
      tags:
        - Challenge Submissions
      summary: Get All Submissions for Challenge
      description: Get all student submissions for a challenge. Only available to users with mentor or admin role.
      operationId: getAllChallengeSubmissions
      security:
        - bearerAuth: [ ]
      parameters:
        - name: challenge_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
        - name: cursor
          in: query
          schema:
            type: string
            format: uuid
          description: Cursor for pagination (UUID of last item in previous page)
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 10
            default: 10
          description: Number of items per page
        - name: direction
          in: query
          schema:
            type: string
            enum: [ next, prev ]
          description: Direction for pagination (required when cursor is provided)
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - submissions
                  - pagination
                properties:
                  submissions:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChallengeSubmission'
                  pagination:
                    $ref: '#/components/schemas/PaginationResponse'
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'

  /challenges/submissions/{submission_id}/feedbacks:
    post:
      tags:
        - Challenge Submissions
      summary: Provide Feedback on Submission
      description: Provide feedback on a student's challenge submission. Only available to users with mentor role.
      operationId: createChallengeSubmissionFeedback
      security:
        - bearerAuth: [ ]
      parameters:
        - name: submission_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "01949e48-9f6b-796b-9611-3c9025493233"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - score
                - feedback
              properties:
                score:
                  type: integer
                  minimum: 0
                  maximum: 100
                  examples:
                    - 85
                feedback:
                  type: string
                  minLength: 3
                  maxLength: 1000
                  examples:
                    - "Great solution! Good time complexity but could improve space usage."
      responses:
        '201':
          description: Success - Feedback submitted successfully
        '400':
          $ref: '#/components/responses/ErrFailParseRequest'
        '401':
          $ref: '#/components/responses/BearerTokenErrors'
        '403':
          $ref: '#/components/responses/ErrForbiddenRole'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/ErrMentorAlreadySubmittedFeedback'
        '422':
          $ref: '#/components/responses/ErrValidation'
        '500':
          $ref: '#/components/responses/ErrInternalServer'
